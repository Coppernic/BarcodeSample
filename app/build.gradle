plugins {
    id "fr.coppernic.versioning" version "3.1.2"
}

apply plugin: 'com.android.application'
apply plugin: 'fr.coppernic.extensions'

copper {
    projectName = "$rootProject.name"

    options {
        system true
        user true
    }

    publications {
        genSourcesForVariant = { variant ->
            true
        }

        artifactIdHook = { String base, variant ->
            if (variant.flavorName == "standard") {
                return base
            } else {
                return "$base-$variant.flavorName"
            }
        }

        artiConfig = project.hasProperty('artiServer') ? project.artiServer : "arti01"
    }
}

apply plugin: 'fr.coppernic.android'

repositories {
    google()
    jcenter()
    mavenCentral()
    maven { url "https://artifactory.coppernic.fr/artifactory/libs-release" }
    mavenLocal()
}

android {
    compileSdkVersion 27

    defaultConfig {
        applicationId "fr.coppernic.sample.barcode"
        minSdkVersion 17
        targetSdkVersion 27
        versionCode versioning.info.versionCode
        versionName versioning.info.display

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        vectorDrawables.useSupportLibrary = true
        manifestPlaceholders = [sharedUserId: "$applicationId"]

        // Even if we are not compiling native code, this is used as filter.
        ndk {
            abiFilters "armeabi-v7a"
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    packagingOptions {
        exclude 'META-INF/lib_release.kotlin_module'
    }

    productFlavors {
        coneo {
            dimension "product"
            signingConfig android.signingConfigs.conen
            manifestPlaceholders = [sharedUserId: "android.uid.system"]
            applicationIdSuffix = ".coneo"
        }
    }

    variantFilter { variant ->
        def names = variant.flavors*.name
        //println "variantFilter $names"
        if(project.hasProperty('filter') && !names.contains(project.filter)) {
            //println "filtering ${variant.name}"
            setIgnore(true)
        }
    }
}

String support = "27.1.1"
String barcode_legacy = '3.4.2'
String barcode = 'oreo'

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "com.android.support:appcompat-v7:${support}"
    implementation "com.android.support.constraint:constraint-layout:1.1.3"
    implementation "com.android.support:design:${support}"
    implementation "com.android.support:support-v4:${support}"
    implementation "com.android.support:support-vector-drawable:${support}"
    implementation("com.afollestad.material-dialogs:core:0.9.6.0") {
        exclude group: 'com.android.support'
    }
    implementation("com.afollestad.material-dialogs:commons:0.9.6.0") {
        exclude group: 'com.android.support'
    }

    implementation 'com.jakewharton:butterknife:8.8.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.1'

    // Ui
    implementation 'fr.coppernic.lib:splash:0.1.0'

    // Coppernic
    implementation "fr.coppernic.sdk.core:CpcCore:1.8.14"
    implementation "fr.coppernic.sdk.cpcutils:CpcUtilsLib:6.18.4"
    implementation "fr.coppernic.sdk.barcode:CpcBarcode:$barcode_legacy"

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.hamcrest:hamcrest-all:1.3'
    testImplementation 'org.awaitility:awaitility:3.0.0'
    testImplementation 'org.mockito:mockito-core:2.23.4'
    testImplementation 'org.robolectric:robolectric:3.8'

    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'org.awaitility:awaitility:3.0.0'
    androidTestImplementation('com.schibsted.spain:barista:2.4.0') {
        exclude group: 'com.android.support'
        //exclude group: 'org.jetbrains.kotlin' // Only if you already use Kotlin in your project
    }
}

configurations.all {
    //println "$name"
    if( name.startsWith("conen") ) {
        //println "$name -> $resolutionStrategy"
        resolutionStrategy.dependencySubstitution {
            substitute module("fr.coppernic.sdk.barcode:CpcBarcode:$barcode_legacy") with module("fr.coppernic.lib.barcode:CpcBarcode-conen:$barcode")
        }
    } else if (name.startsWith("coneo")) {
        //println "$name -> $resolutionStrategy"
        resolutionStrategy.dependencySubstitution {
            substitute module("fr.coppernic.sdk.barcode:CpcBarcode:$barcode_legacy") with module("fr.coppernic.lib.barcode:CpcBarcode-coneo:$barcode")
        }
    }
}
